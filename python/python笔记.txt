语句结尾不需要分号
字符串可以用双引号和单引号
for，if语句的后面都有冒号
函数和类后面要有括号

str()数值转字符串
int()字符串转数值
字符串在python内部是unicode编码，当我们需要写入文件的时候最好转换成utf-8模式


打印
print中用逗号链接两个字符串，会在中间插入空格。如果不想要空格的话就使用加号
Python还允许用r''表示''内部的字符串默认不转义
Python允许用'''...'''的格式表示多行内容


变量
python的变量类型是动态的，也就是说变量是可以随时跟换类型的。而java和c是静态的，变量定义是什么类型就是什么类型。
变量名实际是一个指针，指向的数据可以随时可以更改。对变量赋值就是把数据和变量给关联起来。
整形数据大小没有限制，浮点也没有，只是最大的时候会显示inf


列表（list）
列表是用方括号包起来的
可是随时添加和删除里面的元素，里面的元素可以是不同的类型
通过数字类型a[x]访问里面的元素，下标从0开始
len可以获取列表中元素的个数
复制列表的内容使用[:]，而不能直接用等号赋值。等号赋值相当于指针指向同一个数据。


元组（tuple）
元组是用括号包起来的
不能修改的列表就是元组。元组相当于const定义的常量。
定义只有一个元素的元组时后面需要加个逗号 t = (1,)，免得被当成数学括号


字典（dict）
字典是用大括号包起来的
字典是二维结构，由键-值对组成，由hash方式存储
字典的数据访问也是通过数组的方式只不过下标是，例如keyd['Michael']
字典里的key必须是不可变的类型，列表就不能当做key，但是元组可以（前提是元组里不含列表）
dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。

集合（set）
集合由set创建，类似于列表，只不过集合里的数据不能有重复的。
集合也是由hash方式储存


函数
给函数传递的参数就是实参，如果需要传递副本需要传递 实参[:]
函数可以同时返回多个值，但其实就是一个tuple。在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值。
定义默认参数要牢记一点：默认参数必须指向不变对象！如果默认参数是一个列表，每次对列表的操作都会被记录
可变参数：*args是可变参数，args接收的是一个tuple；
键字参数：**kw是关键字参数，kw接收的是一个dict。函数实际获得的dict是一份拷贝，对它改动不会影响到函数外的字典
命名关键字参数：*号在关键字的前面，def person(name, age, *, city, job)限制关键字只能是city和job
  如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了，def person(name, age, *args, city, job):

在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数
对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。


迭代器
凡是可作用于for循环的对象都是Iterable类型；
凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。


模块
模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。
导入相同的函数名会导致前面的被覆盖

类
类命名首字母最好大写。
私有变量需要加上__xxx,pytho会将变量修改为_class__xxx。如果这时我们在外面直接使用class.__xxx访问变量，实际上访问的是另一个变量
__xxx__是特殊变量



打开文件默认查找运行的xx.py脚本目录下的
文件只能以字符串方式写入，数字需要先转换成字符串

python异常类型
https://docs.python.org/3/library/exceptions.html#exception-hierarchy

语言规范
https://docs.python.org/3/reference/index.html#reference-index

标准库
https://docs.python.org/3/library/index.html